;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.
;; RUN: wasm-opt %s --dce -tnh -all -S -o - | filecheck %s

(module
  ;; CHECK:      (func $block-in-if-arm
  ;; CHECK-NEXT:  (local $x i32)
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (i32.const 1)
  ;; CHECK-NEXT:   (block
  ;; CHECK-NEXT:    (local.set $x
  ;; CHECK-NEXT:     (i32.const 1)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (local.set $x
  ;; CHECK-NEXT:     (i32.const 2)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (if
  ;; CHECK-NEXT:     (i32.const -1)
  ;; CHECK-NEXT:     (return)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (unreachable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $block-in-if-arm
    (local $x i32)
    (if
      (i32.const 1)
      (block
        ;; The unreachable later can be assumed to never be reached in tnh mode,
        ;; so we can remove code that is right before it. Specifically that
        ;; includes the sets of 3 and 4, but not 1 and 2, since they might not
        ;; get there if the return happens. (The sets of 5 and 6 can also be
        ;; removed, even in non-tnh mode.)
        (local.set $x
          (i32.const 1)
        )
        (local.set $x
          (i32.const 2)
        )
        (if
          (i32.const -1)
          (return)
        )
        (local.set $x
          (i32.const 3)
        )
        (local.set $x
          (i32.const 4)
        )
        (unreachable)
        (local.set $x
          (i32.const 5)
        )
        (local.set $x
          (i32.const 6)
        )
      )
    )
  )

  ;; CHECK:      (func $toplevel
  ;; CHECK-NEXT:  (local $x i32)
  ;; CHECK-NEXT:  (local.set $x
  ;; CHECK-NEXT:   (i32.const 1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (local.set $x
  ;; CHECK-NEXT:   (i32.const 2)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (i32.const -1)
  ;; CHECK-NEXT:   (return)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (unreachable)
  ;; CHECK-NEXT: )
  (func $toplevel
    (local $x i32)
    ;; As above but at the toplevel.
    (local.set $x
      (i32.const 1)
    )
    (local.set $x
      (i32.const 2)
    )
    (if
      (i32.const -1)
      (return)
    )
    (local.set $x
      (i32.const 3)
    )
    (local.set $x
      (i32.const 4)
    )
    (unreachable)
    (local.set $x
      (i32.const 5)
    )
    (local.set $x
      (i32.const 6)
    )
  )
)
