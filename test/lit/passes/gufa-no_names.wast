;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.
;; RUN: foreach %s %t wasm-opt -all --remove-unused-names --gufa -S -o - | filecheck %s

;; Tests cases where the lack of names matters (hence --remove-unused-names)
;; Two tags with different values.
(module
  ;; CHECK:      (type $i32_=>_none (func (param i32)))

  ;; CHECK:      (type $f32_=>_none (func (param f32)))

  ;; CHECK:      (type $none_=>_i32 (func (result i32)))

  ;; CHECK:      (tag $tag$i32 (param i32))
  (tag $tag$i32 (param i32))
  ;; CHECK:      (tag $tag$f32 (param f32))
  (tag $tag$f32 (param f32))

  ;; CHECK:      (func $test (result i32)
  ;; CHECK-NEXT:  (local $0 i32)
  ;; CHECK-NEXT:  (local $1 f32)
  ;; CHECK-NEXT:  (try
  ;; CHECK-NEXT:   (do
  ;; CHECK-NEXT:    (throw $tag$i32
  ;; CHECK-NEXT:     (i32.const 42)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (catch $tag$i32
  ;; CHECK-NEXT:    (local.set $0
  ;; CHECK-NEXT:     (pop i32)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (drop
  ;; CHECK-NEXT:     (block (result i32)
  ;; CHECK-NEXT:      (drop
  ;; CHECK-NEXT:       (local.get $0)
  ;; CHECK-NEXT:      )
  ;; CHECK-NEXT:      (i32.const 42)
  ;; CHECK-NEXT:     )
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (catch $tag$f32
  ;; CHECK-NEXT:    (local.set $1
  ;; CHECK-NEXT:     (pop f32)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (drop
  ;; CHECK-NEXT:     (block
  ;; CHECK-NEXT:      (drop
  ;; CHECK-NEXT:       (local.get $1)
  ;; CHECK-NEXT:      )
  ;; CHECK-NEXT:      (unreachable)
  ;; CHECK-NEXT:     )
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (try (result i32)
  ;; CHECK-NEXT:   (do
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (catch $tag$i32
  ;; CHECK-NEXT:    (drop
  ;; CHECK-NEXT:     (pop i32)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (i32.const 42)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $test (result i32)
    (try
      (do
        (throw $tag$i32
          (i32.const 42)
        )
      )
      (catch $tag$i32
        ;; We always throw a 42 to this tag, so we can optimize this.
        (drop
          (pop i32)
        )
      )
      (catch $tag$f32
        ;; We never actually throw this, so it can be turned into an
        ;; unreachable.
        (drop
          (pop f32)
        )
      )
    )
    ;; Like the first case, we can optimize this, but now the try has a return
    ;; value, so we must emit output that makes sense for that. The try has no
    ;; name, so we may want to remove it, but we can't - we can't leave its
    ;; children without the parent, as the children contain a pop that would be
    ;; in an improper position.
    (try (result i32)
      (do
        (i32.const 0)
      )
      (catch $tag$i32
        (pop i32)
      )
    )
  )
)

