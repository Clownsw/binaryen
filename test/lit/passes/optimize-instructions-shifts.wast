;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.
;; RUN: wasm-opt %s --optimize-instructions -S -o - | filecheck %s

(module
  (func $less-than-shifted (param $x i32) (param $y i64)
    ;; (x >> 2) < 100  =>  x < 400
    (drop
      (i32.lt_s
        (i32.shr_s
          (local.get $x)
          (i32.const 2)
        )
        (i32.const 100)
      )
    )
    ;; As above, but with i64.
    (drop
      (i64.lt_s
        (i64.shr_s
          (local.get $y)
          (i64.const 2)
        )
        (i64.const 100)
      )
    )
    ;; Borderline values: we don't want the constant on the right, when shifted
    ;; by the number of shifts, to become signed, as that might alter the
    ;; result. This case can be optimized, and the one after it not.
    (drop
      (i32.lt_s
        (i32.shr_s
          (local.get $x)
          (i32.const 22)
        )
        (i32.const 255)
      )
    )
    (drop
      (i32.lt_s
        (i32.shr_s
          (local.get $x)
          (i32.const 23)
        )
        (i32.const 255)
      )
    )
  )

  (func $less-than-shifted-todo (param $x i32)
    ;; We don't optimize these yet.
    ;; This comparison is unsigned.
    (drop
      (i32.lt_u
        (i32.shr_s
          (local.get $x)
          (i32.const 2)
        )
        (i32.const 100)
      )
    )
    ;; This shift is unsigned.
    (drop
      (i32.lt_s
        (i32.shr_u
          (local.get $x)
          (i32.const 2)
        )
        (i32.const 100)
      )
    )
  )
)
