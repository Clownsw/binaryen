;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.
;; RUN: wasm-opt %s --merge-locals -all -S -o - \
;; RUN:   | filecheck %s

(module
  ;; CHECK:      (func $subtype-to-copy
  ;; CHECK-NEXT:  (local $copy anyref)
  ;; CHECK-NEXT:  (local $original anyref)
  ;; CHECK-NEXT:  (local.set $copy
  ;; CHECK-NEXT:   (local.get $original)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (local.get $copy)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (local.get $copy)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $subtype-to-copy
    (local $copy anyref)
    (local $original anyref)
    (local.set $copy
      (local.get $original)
    )
    ;; Test that merge-locals support subtyping. Merge-locals wants to use the
    ;; same local in as many places, which simplies the pattern of local usage
    ;; and allows more opts later.
    ;; In this case, both gets can use $copy.
    (drop
      (local.get $original)
    )
    (drop
      (local.get $copy)
    )
  )

  ;; CHECK:      (func $subtype-to-original (param $param i32)
  ;; CHECK-NEXT:  (local $copy anyref)
  ;; CHECK-NEXT:  (local $original anyref)
  ;; CHECK-NEXT:  (local.set $copy
  ;; CHECK-NEXT:   (local.get $original)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (local.get $original)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (local.get $param)
  ;; CHECK-NEXT:   (local.set $original
  ;; CHECK-NEXT:    (ref.null func)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (local.get $original)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $subtype-to-original (param $param i32)
    (local $copy anyref)
    (local $original anyref)
    (local.set $copy
      (local.get $original)
    )
    ;; Another possible set exists to $original, which prevents using $copy for
    ;; both of the gets. However, we can use $original for them both.
    (drop
      (local.get $copy)
    )
    (if
      (local.get $param)
      (local.set $original
        (ref.null func)
      )
    )
    (drop
      (local.get $original)
    )
  )
)

