;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.
;; RUN: wasm-opt %s --simplify-locals -tnh --enable-reference-types --enable-gc --nominal -S -o - | filecheck %s

(module
  ;; CHECK:      (type $array (array_subtype (mut i32) data))
  (type $array (array_subtype (mut i32) data))

  ;; CHECK:      (type $array-immutable (array_subtype i32 data))
  (type $array-immutable (array_subtype i32 data))

  ;; CHECK:      (func $array-mutable (type $ref|$array|_=>_i32) (param $a (ref $array)) (result i32)
  ;; CHECK-NEXT:  (local $temp i32)
  ;; CHECK-NEXT:  (local.set $temp
  ;; CHECK-NEXT:   (array.get $array
  ;; CHECK-NEXT:    (local.get $a)
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (call $helper)
  ;; CHECK-NEXT:  (local.get $temp)
  ;; CHECK-NEXT: )
  (func $array-mutable (param $a (ref $array)) (result i32)
    (local $temp i32)
    ;; As the array is mutable, it can be modified in the call, and we cannot
    ;; reorder here.
    (local.set $temp
      (array.get $array
        (local.get $a)
        (i32.const 0)
      )
    )
    (call $helper)
    (local.get $temp)
  )

  ;; CHECK:      (func $array-immutable (type $ref|$array-immutable|_=>_i32) (param $a (ref $array-immutable)) (result i32)
  ;; CHECK-NEXT:  (local $temp i32)
  ;; CHECK-NEXT:  (local.set $temp
  ;; CHECK-NEXT:   (array.get $array-immutable
  ;; CHECK-NEXT:    (local.get $a)
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (call $helper)
  ;; CHECK-NEXT:  (local.get $temp)
  ;; CHECK-NEXT: )
  (func $array-immutable (param $a (ref $array-immutable)) (result i32)
    (local $temp i32)
    ;; As the array is immutable, it cannot be modified in the call, and we can
    ;; reorder here.
    ;; Results are wrong here, even with tnh. not powerful enough yett
    (local.set $temp
      (array.get $array-immutable
        (local.get $a)
        (i32.const 0)
      )
    )
    (call $helper)
    (local.get $temp)
  )

  ;; CHECK:      (func $array-copy (type $ref|$array|_ref|$array-immutable|_=>_i32) (param $a (ref $array)) (param $b (ref $array-immutable)) (result i32)
  ;; CHECK-NEXT:  (local $temp i32)
  ;; CHECK-NEXT:  (local.set $temp
  ;; CHECK-NEXT:   (array.get $array
  ;; CHECK-NEXT:    (local.get $a)
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (array.copy $array $array-immutable
  ;; CHECK-NEXT:   (local.get $a)
  ;; CHECK-NEXT:   (i32.const 11)
  ;; CHECK-NEXT:   (local.get $b)
  ;; CHECK-NEXT:   (i32.const 42)
  ;; CHECK-NEXT:   (i32.const 1337)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (local.get $temp)
  ;; CHECK-NEXT: )
  (func $array-copy (param $a (ref $array)) (param $b (ref $array-immutable)) (result i32)
    (local $temp i32)
    (local.set $temp
      (array.get $array
        (local.get $a)
        (i32.const 0)
      )
    )
    ;; This copy prevents reordering, as we write to an array. More specific
    ;; type analysis could have helped, though.
    (array.copy $array $array-immutable
      (local.get $a)
      (i32.const 11)
      (local.get $b)
      (i32.const 42)
      (i32.const 1337)
    )
    (local.get $temp)
  )

  ;; CHECK:      (func $array-copy-immutable (type $ref|$array|_ref|$array-immutable|_=>_i32) (param $a (ref $array)) (param $b (ref $array-immutable)) (result i32)
  ;; CHECK-NEXT:  (local $temp i32)
  ;; CHECK-NEXT:  (local.set $temp
  ;; CHECK-NEXT:   (array.get $array-immutable
  ;; CHECK-NEXT:    (local.get $b)
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (array.copy $array $array-immutable
  ;; CHECK-NEXT:   (local.get $a)
  ;; CHECK-NEXT:   (i32.const 11)
  ;; CHECK-NEXT:   (local.get $b)
  ;; CHECK-NEXT:   (i32.const 42)
  ;; CHECK-NEXT:   (i32.const 1337)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (local.get $temp)
  ;; CHECK-NEXT: )
  (func $array-copy-immutable (param $a (ref $array)) (param $b (ref $array-immutable)) (result i32)
    (local $temp i32)
    (local.set $temp
      ;; As above, but now we read from an immutable array, which can be moved
      ;; past the copy.
      (array.get $array-immutable
        (local.get $b)
        (i32.const 0)
      )
    )
    (array.copy $array $array-immutable
      (local.get $a)
      (i32.const 11)
      (local.get $b)
      (i32.const 42)
      (i32.const 1337)
    )
    (local.get $temp)
  )

  ;; Helper function for the above.
  ;; CHECK:      (func $helper (type $none_=>_none)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT: )
  (func $helper)
)
