;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.

;; RUN: foreach %s %t wasm-opt -all -S -o - | filecheck %s

;; Tests for the "1a" form of non-nullable locals. This will likely be the final
;; form in the spec.

(module
  ;; CHECK:      (type $none_=>_none (func))

  ;; CHECK:      (elem declare func $helper)

  ;; CHECK:      (func $no-uses
  ;; CHECK-NEXT:  (local $x (ref func))
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT: )
  (func $no-uses
    ;; A local with no uses validates.
    (local $x (ref func))
  )

  ;; CHECK:      (func $func-scope
  ;; CHECK-NEXT:  (local $x (ref func))
  ;; CHECK-NEXT:  (local.set $x
  ;; CHECK-NEXT:   (ref.func $helper)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $func-scope
    ;; a set in the func scope helps a get validate there.
    (local $x (ref func))
    (local.set $x
      (ref.func $helper)
    )
    (drop
      (local.get $x)
    )
  )

  ;; CHECK:      (func $inner-scope
  ;; CHECK-NEXT:  (local $x (ref func))
  ;; CHECK-NEXT:  (block $b
  ;; CHECK-NEXT:   (local.set $x
  ;; CHECK-NEXT:    (ref.func $helper)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (drop
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $inner-scope
    ;; a set in an inner scope helps a get validate there.
    (local $x (ref func))
    (block $b
      (local.set $x
        (ref.func $helper)
      )
      (drop
        (local.get $x)
      )
    )
  )

  ;; CHECK:      (func $func-to-inner
  ;; CHECK-NEXT:  (local $x (ref func))
  ;; CHECK-NEXT:  (local.set $x
  ;; CHECK-NEXT:   (ref.func $helper)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (block $b
  ;; CHECK-NEXT:   (drop
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $func-to-inner
    ;; a set in an outer scope helps a get validate.
    (local $x (ref func))
    (local.set $x
      (ref.func $helper)
    )
    (block $b
      (drop
        (local.get $x)
      )
    )
  )

  ;; CHECK:      (func $helper
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT: )
  (func $helper)
)
