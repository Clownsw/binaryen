;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.

;; Tests for the "1a" form of non-nullable locals. This will likely be the final
;; form in the spec. We test:
;;
;;  * Just printing the module as read from text here. There is no limit on
;;    locals that way: everything is allowed.
;;  * Round-tripping through the binary. In the binary we enforce "1a", so some
;;    locals become nullable.
;;  * Optimizing also enforces "1a".
;;
;; Note: All functions have some extra params added, which look silly. Those
;; prevent the optimization pipeline from merging functions, which would make
;; the results very hard to read.
;;
;; Note: The optimizing path will optimize almost all testcases into nothing. It
;; is hard to avoid that while writing small testcases that clearly show the
;; situations. Coverage by roundtripping should be enough there. $need-fix is
;; a larger testcase that is designed to not be optimized out, and shows that
;; optimizing path also does the fixes.

;; RUN: wasm-opt %s -all             -S -o - | filecheck %s --check-prefix PRINT
;; RUN: wasm-opt %s -all --roundtrip -S -o - | filecheck %s --check-prefix ROUNDTRIP
;; RUN: wasm-opt %s -all -O1         -S -o - | filecheck %s --check-prefix OPTIMIZE

(module
  ;; PRINT:      (type $i32_=>_none (func (param i32)))

  ;; PRINT:      (type $anyref_=>_none (func (param anyref)))

  ;; PRINT:      (type $i64_anyref_=>_none (func (param i64 anyref)))

  ;; PRINT:      (type $i64_=>_none (func (param i64)))

  ;; PRINT:      (type $f32_=>_none (func (param f32)))

  ;; PRINT:      (type $f64_=>_none (func (param f64)))

  ;; PRINT:      (type $i32_i32_=>_none (func (param i32 i32)))

  ;; PRINT:      (type $i32_f64_=>_none (func (param i32 f64)))

  ;; PRINT:      (type $i32_i64_=>_anyref (func (param i32 i64) (result anyref)))

  ;; PRINT:      (type $i64_i64_=>_none (func (param i64 i64)))

  ;; PRINT:      (type $f32_f32_ref|func|_=>_none (func (param f32 f32 (ref func))))

  ;; PRINT:      (type $none_=>_none (func))

  ;; PRINT:      (type $anyref_=>_i32 (func (param anyref) (result i32)))

  ;; PRINT:      (import "a" "b" (func $import (param anyref)))
  ;; ROUNDTRIP:      (type $i32_=>_none (func (param i32)))

  ;; ROUNDTRIP:      (type $anyref_=>_none (func (param anyref)))

  ;; ROUNDTRIP:      (type $i64_anyref_=>_none (func (param i64 anyref)))

  ;; ROUNDTRIP:      (type $i64_=>_none (func (param i64)))

  ;; ROUNDTRIP:      (type $f32_=>_none (func (param f32)))

  ;; ROUNDTRIP:      (type $f64_=>_none (func (param f64)))

  ;; ROUNDTRIP:      (type $i32_i32_=>_none (func (param i32 i32)))

  ;; ROUNDTRIP:      (type $i32_f64_=>_none (func (param i32 f64)))

  ;; ROUNDTRIP:      (type $i32_i64_=>_anyref (func (param i32 i64) (result anyref)))

  ;; ROUNDTRIP:      (type $i64_i64_=>_none (func (param i64 i64)))

  ;; ROUNDTRIP:      (type $f32_f32_ref|func|_=>_none (func (param f32 f32 (ref func))))

  ;; ROUNDTRIP:      (type $none_=>_none (func))

  ;; ROUNDTRIP:      (type $anyref_=>_i32 (func (param anyref) (result i32)))

  ;; ROUNDTRIP:      (import "a" "b" (func $import (param anyref)))
  ;; OPTIMIZE:      (type $i32_=>_none (func (param i32)))

  ;; OPTIMIZE:      (type $anyref_=>_none (func (param anyref)))

  ;; OPTIMIZE:      (type $i64_anyref_=>_none (func (param i64 anyref)))

  ;; OPTIMIZE:      (type $i64_=>_none (func (param i64)))

  ;; OPTIMIZE:      (type $f32_=>_none (func (param f32)))

  ;; OPTIMIZE:      (type $f64_=>_none (func (param f64)))

  ;; OPTIMIZE:      (type $i32_i32_=>_none (func (param i32 i32)))

  ;; OPTIMIZE:      (type $i32_f64_=>_none (func (param i32 f64)))

  ;; OPTIMIZE:      (type $i32_i64_=>_anyref (func (param i32 i64) (result anyref)))

  ;; OPTIMIZE:      (type $i64_i64_=>_none (func (param i64 i64)))

  ;; OPTIMIZE:      (type $f32_f32_ref|func|_=>_none (func (param f32 f32 (ref func))))

  ;; OPTIMIZE:      (type $none_=>_none (func))

  ;; OPTIMIZE:      (type $anyref_=>_i32 (func (param anyref) (result i32)))

  ;; OPTIMIZE:      (import "a" "b" (func $import (param anyref)))
  (import "a" "b" (func $import (param anyref)))

  ;; PRINT:      (import "a" "b" (func $import2 (param i32)))
  ;; ROUNDTRIP:      (import "a" "b" (func $import2 (param i32)))
  ;; OPTIMIZE:      (import "a" "b" (func $import2 (param i32)))
  (import "a" "b" (func $import2 (param i32)))

  ;; PRINT:      (elem declare func $helper $helper2)

  ;; PRINT:      (export "no-uses" (func $no-uses))

  ;; PRINT:      (export "just-use" (func $just-use))

  ;; PRINT:      (export "func-scope" (func $func-scope))

  ;; PRINT:      (export "inner-scope" (func $inner-scope))

  ;; PRINT:      (export "func-to-inner" (func $func-to-inner))

  ;; PRINT:      (export "inner-to-func" (func $inner-to-func))

  ;; PRINT:      (export "inner-to-func2" (func $inner-to-func2))

  ;; PRINT:      (export "need-fix" (func $need-fix))

  ;; PRINT:      (export "if-condition" (func $if-condition))

  ;; PRINT:      (export "get-without-set-but-param" (func $get-without-set-but-param))

  ;; PRINT:      (func $no-uses (param $0 i32)
  ;; PRINT-NEXT:  (local $x (ref func))
  ;; PRINT-NEXT:  (nop)
  ;; PRINT-NEXT: )
  ;; ROUNDTRIP:      (elem declare func $helper $helper2)

  ;; ROUNDTRIP:      (export "no-uses" (func $no-uses))

  ;; ROUNDTRIP:      (export "just-use" (func $just-use))

  ;; ROUNDTRIP:      (export "func-scope" (func $func-scope))

  ;; ROUNDTRIP:      (export "inner-scope" (func $inner-scope))

  ;; ROUNDTRIP:      (export "func-to-inner" (func $func-to-inner))

  ;; ROUNDTRIP:      (export "inner-to-func" (func $inner-to-func))

  ;; ROUNDTRIP:      (export "inner-to-func2" (func $inner-to-func2))

  ;; ROUNDTRIP:      (export "need-fix" (func $need-fix))

  ;; ROUNDTRIP:      (export "if-condition" (func $if-condition))

  ;; ROUNDTRIP:      (export "get-without-set-but-param" (func $get-without-set-but-param))

  ;; ROUNDTRIP:      (func $no-uses (param $0 i32)
  ;; ROUNDTRIP-NEXT:  (local $x (ref func))
  ;; ROUNDTRIP-NEXT:  (nop)
  ;; ROUNDTRIP-NEXT: )
  ;; OPTIMIZE:      (elem declare func $helper $helper2)

  ;; OPTIMIZE:      (export "no-uses" (func $no-uses))

  ;; OPTIMIZE:      (export "just-use" (func $just-use))

  ;; OPTIMIZE:      (export "func-scope" (func $func-scope))

  ;; OPTIMIZE:      (export "inner-scope" (func $inner-scope))

  ;; OPTIMIZE:      (export "func-to-inner" (func $func-to-inner))

  ;; OPTIMIZE:      (export "inner-to-func" (func $inner-to-func))

  ;; OPTIMIZE:      (export "inner-to-func2" (func $inner-to-func2))

  ;; OPTIMIZE:      (export "need-fix" (func $need-fix))

  ;; OPTIMIZE:      (export "if-condition" (func $if-condition))

  ;; OPTIMIZE:      (export "get-without-set-but-param" (func $get-without-set-but-param))

  ;; OPTIMIZE:      (func $no-uses (param $0 i32)
  ;; OPTIMIZE-NEXT:  (nop)
  ;; OPTIMIZE-NEXT: )
  (func $no-uses (export "no-uses") (param i32) ;; see note above on param
    ;; A local with no uses validates - no need for changes.
    (local $x (ref func))
  )

  ;; PRINT:      (func $just-use (param $0 i64) (param $1 anyref)
  ;; PRINT-NEXT:  (local $x (ref func))
  ;; PRINT-NEXT:  (drop
  ;; PRINT-NEXT:   (local.get $x)
  ;; PRINT-NEXT:  )
  ;; PRINT-NEXT: )
  ;; ROUNDTRIP:      (func $just-use (param $0 i64) (param $1 anyref)
  ;; ROUNDTRIP-NEXT:  (local $x funcref)
  ;; ROUNDTRIP-NEXT:  (drop
  ;; ROUNDTRIP-NEXT:   (ref.as_non_null
  ;; ROUNDTRIP-NEXT:    (local.get $x)
  ;; ROUNDTRIP-NEXT:   )
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT: )
  ;; OPTIMIZE:      (func $just-use (param $0 i64) (param $1 anyref)
  ;; OPTIMIZE-NEXT:  (nop)
  ;; OPTIMIZE-NEXT: )
  (func $just-use (export "just-use") (param i64 anyref)
    ;; a set in the func scope helps a get validate there.
    (local $x (ref func))
    ;; A get without a set will not validate. We will fix this up in ROUNDTRIP
    ;; (and OPTIMIZE will just optimize it all away).
    (drop
      (local.get $x)
    )
  )

  ;; PRINT:      (func $func-scope (param $0 i64)
  ;; PRINT-NEXT:  (local $x (ref func))
  ;; PRINT-NEXT:  (local.set $x
  ;; PRINT-NEXT:   (ref.func $helper)
  ;; PRINT-NEXT:  )
  ;; PRINT-NEXT:  (drop
  ;; PRINT-NEXT:   (local.get $x)
  ;; PRINT-NEXT:  )
  ;; PRINT-NEXT: )
  ;; ROUNDTRIP:      (func $func-scope (param $0 i64)
  ;; ROUNDTRIP-NEXT:  (local $x (ref func))
  ;; ROUNDTRIP-NEXT:  (local.set $x
  ;; ROUNDTRIP-NEXT:   (ref.func $helper)
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT:  (drop
  ;; ROUNDTRIP-NEXT:   (local.get $x)
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT: )
  ;; OPTIMIZE:      (func $func-scope (param $0 i64)
  ;; OPTIMIZE-NEXT:  (nop)
  ;; OPTIMIZE-NEXT: )
  (func $func-scope (export "func-scope") (param i64)
    ;; a set in the func scope helps a get validate there.
    (local $x (ref func))
    (local.set $x
      (ref.func $helper)
    )
    (drop
      (local.get $x)
    )
  )

  ;; PRINT:      (func $inner-scope (param $0 f32)
  ;; PRINT-NEXT:  (local $x (ref func))
  ;; PRINT-NEXT:  (block $b
  ;; PRINT-NEXT:   (local.set $x
  ;; PRINT-NEXT:    (ref.func $helper)
  ;; PRINT-NEXT:   )
  ;; PRINT-NEXT:   (drop
  ;; PRINT-NEXT:    (local.get $x)
  ;; PRINT-NEXT:   )
  ;; PRINT-NEXT:  )
  ;; PRINT-NEXT: )
  ;; ROUNDTRIP:      (func $inner-scope (param $0 f32)
  ;; ROUNDTRIP-NEXT:  (local $x (ref func))
  ;; ROUNDTRIP-NEXT:  (local.set $x
  ;; ROUNDTRIP-NEXT:   (ref.func $helper)
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT:  (drop
  ;; ROUNDTRIP-NEXT:   (local.get $x)
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT: )
  ;; OPTIMIZE:      (func $inner-scope (param $0 f32)
  ;; OPTIMIZE-NEXT:  (nop)
  ;; OPTIMIZE-NEXT: )
  (func $inner-scope (export "inner-scope") (param f32)
    ;; a set in an inner scope helps a get validate there.
    (local $x (ref func))
    (block $b
      (local.set $x
        (ref.func $helper)
      )
      (drop
        (local.get $x)
      )
    )
  )

  ;; PRINT:      (func $func-to-inner (param $0 f64)
  ;; PRINT-NEXT:  (local $x (ref func))
  ;; PRINT-NEXT:  (local.set $x
  ;; PRINT-NEXT:   (ref.func $helper)
  ;; PRINT-NEXT:  )
  ;; PRINT-NEXT:  (block $b
  ;; PRINT-NEXT:   (drop
  ;; PRINT-NEXT:    (local.get $x)
  ;; PRINT-NEXT:   )
  ;; PRINT-NEXT:  )
  ;; PRINT-NEXT: )
  ;; ROUNDTRIP:      (func $func-to-inner (param $0 f64)
  ;; ROUNDTRIP-NEXT:  (local $x (ref func))
  ;; ROUNDTRIP-NEXT:  (local.set $x
  ;; ROUNDTRIP-NEXT:   (ref.func $helper)
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT:  (block $label$1
  ;; ROUNDTRIP-NEXT:   (drop
  ;; ROUNDTRIP-NEXT:    (local.get $x)
  ;; ROUNDTRIP-NEXT:   )
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT: )
  ;; OPTIMIZE:      (func $func-to-inner (param $0 f64)
  ;; OPTIMIZE-NEXT:  (nop)
  ;; OPTIMIZE-NEXT: )
  (func $func-to-inner (export "func-to-inner") (param f64)
    ;; a set in an outer scope helps a get validate.
    (local $x (ref func))
    (local.set $x
      (ref.func $helper)
    )
    (block $b
      (drop
        (local.get $x)
      )
    )
  )

  ;; PRINT:      (func $inner-to-func (param $0 i32) (param $1 i32)
  ;; PRINT-NEXT:  (local $x funcref)
  ;; PRINT-NEXT:  (block $b
  ;; PRINT-NEXT:   (local.set $x
  ;; PRINT-NEXT:    (ref.func $helper)
  ;; PRINT-NEXT:   )
  ;; PRINT-NEXT:  )
  ;; PRINT-NEXT:  (drop
  ;; PRINT-NEXT:   (local.get $x)
  ;; PRINT-NEXT:  )
  ;; PRINT-NEXT: )
  ;; ROUNDTRIP:      (func $inner-to-func (param $0 i32) (param $1 i32)
  ;; ROUNDTRIP-NEXT:  (local $x funcref)
  ;; ROUNDTRIP-NEXT:  (block $label$1
  ;; ROUNDTRIP-NEXT:   (local.set $x
  ;; ROUNDTRIP-NEXT:    (ref.func $helper)
  ;; ROUNDTRIP-NEXT:   )
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT:  (drop
  ;; ROUNDTRIP-NEXT:   (local.get $x)
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT: )
  ;; OPTIMIZE:      (func $inner-to-func (param $0 i32) (param $1 i32)
  ;; OPTIMIZE-NEXT:  (nop)
  ;; OPTIMIZE-NEXT: )
  (func $inner-to-func (export "inner-to-func") (param i32 i32)
    ;; a set in an inner scope does *not* help a get validate, but the type is
    ;; nullable so that's ok.
    (local $x (ref null func))
    (block $b
      (local.set $x
        (ref.func $helper)
      )
    )
    (drop
      (local.get $x)
    )
  )

  ;; PRINT:      (func $inner-to-func2 (param $0 i32) (param $1 f64)
  ;; PRINT-NEXT:  (local $x (ref func))
  ;; PRINT-NEXT:  (block $b
  ;; PRINT-NEXT:   (local.set $x
  ;; PRINT-NEXT:    (ref.func $helper)
  ;; PRINT-NEXT:   )
  ;; PRINT-NEXT:  )
  ;; PRINT-NEXT:  (drop
  ;; PRINT-NEXT:   (local.get $x)
  ;; PRINT-NEXT:  )
  ;; PRINT-NEXT: )
  ;; ROUNDTRIP:      (func $inner-to-func2 (param $0 i32) (param $1 f64)
  ;; ROUNDTRIP-NEXT:  (local $x funcref)
  ;; ROUNDTRIP-NEXT:  (block $label$1
  ;; ROUNDTRIP-NEXT:   (local.set $x
  ;; ROUNDTRIP-NEXT:    (ref.func $helper)
  ;; ROUNDTRIP-NEXT:   )
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT:  (drop
  ;; ROUNDTRIP-NEXT:   (ref.as_non_null
  ;; ROUNDTRIP-NEXT:    (local.get $x)
  ;; ROUNDTRIP-NEXT:   )
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT: )
  ;; OPTIMIZE:      (func $inner-to-func2 (param $0 i32) (param $1 f64)
  ;; OPTIMIZE-NEXT:  (nop)
  ;; OPTIMIZE-NEXT: )
  (func $inner-to-func2 (export "inner-to-func2") (param i32 f64)
    ;; as above, but the type is non-nullable. this requires fixups in ROUNDTRIP
    ;; (PRINT never does fixups, and OPTIMIZE can optimize away the problem)
    (local $x (ref func))
    (block $b
      (local.set $x
        (ref.func $helper)
      )
    )
    (drop
      (local.get $x)
    )
  )

  ;; PRINT:      (func $need-fix (param $0 i32) (param $1 i64) (result anyref)
  ;; PRINT-NEXT:  (local $x (ref func))
  ;; PRINT-NEXT:  (local $y i32)
  ;; PRINT-NEXT:  (if
  ;; PRINT-NEXT:   (local.get $0)
  ;; PRINT-NEXT:   (block $block
  ;; PRINT-NEXT:    (local.set $y
  ;; PRINT-NEXT:     (i32.const 1)
  ;; PRINT-NEXT:    )
  ;; PRINT-NEXT:    (local.set $x
  ;; PRINT-NEXT:     (ref.func $helper)
  ;; PRINT-NEXT:    )
  ;; PRINT-NEXT:   )
  ;; PRINT-NEXT:   (block $block0
  ;; PRINT-NEXT:    (local.set $y
  ;; PRINT-NEXT:     (i32.const 2)
  ;; PRINT-NEXT:    )
  ;; PRINT-NEXT:    (local.set $x
  ;; PRINT-NEXT:     (ref.func $helper2)
  ;; PRINT-NEXT:    )
  ;; PRINT-NEXT:   )
  ;; PRINT-NEXT:  )
  ;; PRINT-NEXT:  (call $import
  ;; PRINT-NEXT:   (local.get $x)
  ;; PRINT-NEXT:  )
  ;; PRINT-NEXT:  (call $import2
  ;; PRINT-NEXT:   (local.get $y)
  ;; PRINT-NEXT:  )
  ;; PRINT-NEXT:  (local.get $x)
  ;; PRINT-NEXT: )
  ;; ROUNDTRIP:      (func $need-fix (param $0 i32) (param $1 i64) (result anyref)
  ;; ROUNDTRIP-NEXT:  (local $x funcref)
  ;; ROUNDTRIP-NEXT:  (local $y i32)
  ;; ROUNDTRIP-NEXT:  (if
  ;; ROUNDTRIP-NEXT:   (local.get $0)
  ;; ROUNDTRIP-NEXT:   (block
  ;; ROUNDTRIP-NEXT:    (local.set $y
  ;; ROUNDTRIP-NEXT:     (i32.const 1)
  ;; ROUNDTRIP-NEXT:    )
  ;; ROUNDTRIP-NEXT:    (local.set $x
  ;; ROUNDTRIP-NEXT:     (ref.func $helper)
  ;; ROUNDTRIP-NEXT:    )
  ;; ROUNDTRIP-NEXT:   )
  ;; ROUNDTRIP-NEXT:   (block
  ;; ROUNDTRIP-NEXT:    (local.set $y
  ;; ROUNDTRIP-NEXT:     (i32.const 2)
  ;; ROUNDTRIP-NEXT:    )
  ;; ROUNDTRIP-NEXT:    (local.set $x
  ;; ROUNDTRIP-NEXT:     (ref.func $helper2)
  ;; ROUNDTRIP-NEXT:    )
  ;; ROUNDTRIP-NEXT:   )
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT:  (call $import
  ;; ROUNDTRIP-NEXT:   (ref.as_non_null
  ;; ROUNDTRIP-NEXT:    (local.get $x)
  ;; ROUNDTRIP-NEXT:   )
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT:  (call $import2
  ;; ROUNDTRIP-NEXT:   (local.get $y)
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT:  (ref.as_non_null
  ;; ROUNDTRIP-NEXT:   (local.get $x)
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT: )
  ;; OPTIMIZE:      (func $need-fix (param $0 i32) (param $1 i64) (result anyref)
  ;; OPTIMIZE-NEXT:  (local $2 funcref)
  ;; OPTIMIZE-NEXT:  (local.set $0
  ;; OPTIMIZE-NEXT:   (if (result i32)
  ;; OPTIMIZE-NEXT:    (local.get $0)
  ;; OPTIMIZE-NEXT:    (block (result i32)
  ;; OPTIMIZE-NEXT:     (local.set $2
  ;; OPTIMIZE-NEXT:      (ref.func $helper)
  ;; OPTIMIZE-NEXT:     )
  ;; OPTIMIZE-NEXT:     (i32.const 1)
  ;; OPTIMIZE-NEXT:    )
  ;; OPTIMIZE-NEXT:    (block (result i32)
  ;; OPTIMIZE-NEXT:     (local.set $2
  ;; OPTIMIZE-NEXT:      (ref.func $helper2)
  ;; OPTIMIZE-NEXT:     )
  ;; OPTIMIZE-NEXT:     (i32.const 2)
  ;; OPTIMIZE-NEXT:    )
  ;; OPTIMIZE-NEXT:   )
  ;; OPTIMIZE-NEXT:  )
  ;; OPTIMIZE-NEXT:  (call $import
  ;; OPTIMIZE-NEXT:   (ref.as_non_null
  ;; OPTIMIZE-NEXT:    (local.get $2)
  ;; OPTIMIZE-NEXT:   )
  ;; OPTIMIZE-NEXT:  )
  ;; OPTIMIZE-NEXT:  (call $import2
  ;; OPTIMIZE-NEXT:   (local.get $0)
  ;; OPTIMIZE-NEXT:  )
  ;; OPTIMIZE-NEXT:  (ref.as_non_null
  ;; OPTIMIZE-NEXT:   (local.get $2)
  ;; OPTIMIZE-NEXT:  )
  ;; OPTIMIZE-NEXT: )
  (func $need-fix (export "need-fix") (param i32 i64) (result anyref)
    ;; This function requires changes, and even in the optimized case: the
    ;; optimizer cannot optimize away the problem here. Here we will see changes
    ;; in the paths that fix up such locals (everything but PRINT).

    (local $x (ref func))
    ;; A second local is needed to avoid the optimizer doing too much.
    (local $y i32)

    (if
      (local.get $0)
      (block
        (local.set $y
          (i32.const 1)
        )
        (local.set $x
          (ref.func $helper)
        )
      )
      (block
        (local.set $y
          (i32.const 2)
        )
        (local.set $x
          (ref.func $helper2)
        )
      )
    )
    (call $import
      (local.get $x)
    )
    (call $import2
      (local.get $y)
    )
    (local.get $x)
  )

  ;; PRINT:      (func $if-condition (param $0 i64) (param $1 i64)
  ;; PRINT-NEXT:  (local $x (ref func))
  ;; PRINT-NEXT:  (if
  ;; PRINT-NEXT:   (call $helper2
  ;; PRINT-NEXT:    (local.tee $x
  ;; PRINT-NEXT:     (ref.func $helper)
  ;; PRINT-NEXT:    )
  ;; PRINT-NEXT:   )
  ;; PRINT-NEXT:   (drop
  ;; PRINT-NEXT:    (local.get $x)
  ;; PRINT-NEXT:   )
  ;; PRINT-NEXT:   (drop
  ;; PRINT-NEXT:    (local.get $x)
  ;; PRINT-NEXT:   )
  ;; PRINT-NEXT:  )
  ;; PRINT-NEXT: )
  ;; ROUNDTRIP:      (func $if-condition (param $0 i64) (param $1 i64)
  ;; ROUNDTRIP-NEXT:  (local $x (ref func))
  ;; ROUNDTRIP-NEXT:  (if
  ;; ROUNDTRIP-NEXT:   (call $helper2
  ;; ROUNDTRIP-NEXT:    (local.tee $x
  ;; ROUNDTRIP-NEXT:     (ref.func $helper)
  ;; ROUNDTRIP-NEXT:    )
  ;; ROUNDTRIP-NEXT:   )
  ;; ROUNDTRIP-NEXT:   (drop
  ;; ROUNDTRIP-NEXT:    (local.get $x)
  ;; ROUNDTRIP-NEXT:   )
  ;; ROUNDTRIP-NEXT:   (drop
  ;; ROUNDTRIP-NEXT:    (local.get $x)
  ;; ROUNDTRIP-NEXT:   )
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT: )
  ;; OPTIMIZE:      (func $if-condition (param $0 i64) (param $1 i64)
  ;; OPTIMIZE-NEXT:  (drop
  ;; OPTIMIZE-NEXT:   (call $helper2
  ;; OPTIMIZE-NEXT:    (ref.func $helper)
  ;; OPTIMIZE-NEXT:   )
  ;; OPTIMIZE-NEXT:  )
  ;; OPTIMIZE-NEXT: )
  (func $if-condition (export "if-condition") (param i64 i64)
    (local $x (ref func))
    (if
      (call $helper2
        ;; Tee in the condition is good enough for the arms.
        (local.tee $x
          (ref.func $helper)
        )
      )
      (drop
        (local.get $x)
      )
      (drop
        (local.get $x)
      )
    )
  )

  ;; PRINT:      (func $get-without-set-but-param (param $0 f32) (param $1 f32) (param $x (ref func))
  ;; PRINT-NEXT:  (drop
  ;; PRINT-NEXT:   (local.get $x)
  ;; PRINT-NEXT:  )
  ;; PRINT-NEXT: )
  ;; ROUNDTRIP:      (func $get-without-set-but-param (param $0 f32) (param $1 f32) (param $x (ref func))
  ;; ROUNDTRIP-NEXT:  (drop
  ;; ROUNDTRIP-NEXT:   (local.get $x)
  ;; ROUNDTRIP-NEXT:  )
  ;; ROUNDTRIP-NEXT: )
  ;; OPTIMIZE:      (func $get-without-set-but-param (param $0 f32) (param $1 f32) (param $2 (ref func))
  ;; OPTIMIZE-NEXT:  (nop)
  ;; OPTIMIZE-NEXT: )
  (func $get-without-set-but-param (export "get-without-set-but-param") (param f32 f32)
    ;; As a parameter, this is ok to get without a set.
    (param $x (ref func))
    (drop
      (local.get $x)
    )
  )

  ;; PRINT:      (func $helper
  ;; PRINT-NEXT:  (nop)
  ;; PRINT-NEXT: )
  ;; ROUNDTRIP:      (func $helper
  ;; ROUNDTRIP-NEXT:  (nop)
  ;; ROUNDTRIP-NEXT: )
  ;; OPTIMIZE:      (func $helper
  ;; OPTIMIZE-NEXT:  (unreachable)
  ;; OPTIMIZE-NEXT: )
  (func $helper)

  ;; PRINT:      (func $helper2 (param $0 anyref) (result i32)
  ;; PRINT-NEXT:  (unreachable)
  ;; PRINT-NEXT: )
  ;; ROUNDTRIP:      (func $helper2 (param $0 anyref) (result i32)
  ;; ROUNDTRIP-NEXT:  (unreachable)
  ;; ROUNDTRIP-NEXT: )
  ;; OPTIMIZE:      (func $helper2 (param $0 anyref) (result i32)
  ;; OPTIMIZE-NEXT:  (unreachable)
  ;; OPTIMIZE-NEXT: )
  (func $helper2 (param anyref) (result i32)
    (unreachable)
  )
)
