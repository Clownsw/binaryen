;; NOTE: Assertions have been generated by update_lit_checks.py --output=fuzz-exec and should not be edited.

;; RUN: wasm-opt %s -all --simplify-locals --fuzz-exec -q -o /dev/null 2>&1 | filecheck %s

(module
  ;; CHECK:      [fuzz-exec] calling test
  ;; CHECK-NEXT: [trap unreachable]
  (func "test"
    (local $x i32)
    (local $nn (ref func))
    ;; This sets an unreachable value, but wrapped in a concrete type, so
    ;; simplify-locals will optimize it to a position lower down. While doing so
    ;; it will cross over the get of the non-nullable local, which will now
    ;; execute - which is dangerous as it has not been set a value. We will
    ;; trap when we get it, which is the same behavior as we'd get after fixing
    ;; up the local to be nullable (we'd add a ref.as_non_null).
    ;;
    ;; This test should trap both before and after the optimization. It is ok
    ;; that the trap messages changes from "unreachable" to "non-nullable
    ;; local reading null".
    (local.set $x
      (block (result i32)
        (unreachable)
      )
    )
    (drop
      (local.get $nn)
    )
    (drop
      (local.get $x)
    )
  )
)
;; CHECK:      [fuzz-exec] calling test
;; CHECK-NEXT: [trap null ref]
;; CHECK-NEXT: [fuzz-exec] comparing test
